(SortedList2
 (list_induction1 0
  (list_induction1-1 nil 3599021936
   ("" (skosimp)
    (("" (induct "list_var")
      (("" (induct "cons2_var")
        (("1" (skosimp) (("1" (grind) nil nil)) nil)
         ("2" (skosimp) (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((List type-decl nil List_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" List_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (List_induction formula-decl nil List_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (cons adt-constructor-decl "[[T, List] -> (cons?)]" List_adt nil)
    (cons? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil))
   shostak))
 (lemme_utile 0
  (lemme_utile-1 nil 3655006861
   ("" (induct "l" :name "list_induction1")
    (("1" (skosimp)
      (("1" (lemma "insert_nil")
        (("1" (inst? -1)
          (("1" (replace -1 1 LR)
            (("1" (lemma "sorted?_cons_nil") (("1" (inst? -1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "insert_nil")
                    (("2" (inst? -1)
                      (("2" (replace -1 2 LR)
                        (("2" (lemma "sorted?_cons_cons")
                          (("2" (inst? -1)
                            (("2" (lemma "sorted?_cons_nil")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1"
                      (inst -1 "i!1" "cons1_var!1"
                       "cons(cons2_var!1, cons3_var!1)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "sorted?_cons_cons")
                    (("2" (inst? -1)
                      (("2" (inst? -3)
                        (("2" (assert)
                          (("2" (case "i!1 <= cons2_var!1")
                            (("1" (lemma "insert_cons_inf")
                              (("1"
                                (inst
                                 -1
                                 "i!1"
                                 "cons2_var!1"
                                 "cons3_var!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (replace -1 2 LR)
                                    (("1"
                                      (lemma "sorted?_cons_cons")
                                      (("1"
                                        (inst
                                         -1
                                         "cons1_var!1"
                                         "i!1"
                                         "cons(cons2_var!1, cons3_var!1)")
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (lemma "insert_cons_sup")
                              (("2"
                                (inst
                                 -1
                                 "i!1"
                                 "cons2_var!1"
                                 "cons3_var!1")
                                (("2"
                                  (assert)
                                  (("2"
                                    (replace -1 3 LR)
                                    (("2"
                                      (lemma "sorted?_cons_cons")
                                      (("2"
                                        (inst
                                         -1
                                         "cons1_var!1"
                                         "cons2_var!1"
                                         "insert(i!1, cons3_var!1)")
                                        (("2"
                                          (assert)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (List type-decl nil List_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" List_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? const-decl "[List[nat] -> boolean]" SortedList2 nil)
    (insert const-decl "[nat, List[nat] -> List[nat]]" SortedList2 nil)
    (list_induction1 formula-decl nil SortedList2 nil)
    (insert_nil formula-decl nil SortedList2 nil)
    (sorted?_cons_nil formula-decl nil SortedList2 nil)
    (insert_cons_sup formula-decl nil SortedList2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (insert_cons_inf formula-decl nil SortedList2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted?_cons_cons formula-decl nil SortedList2 nil)
    (empty? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (nil adt-constructor-decl "(empty?)" List_adt nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (cons adt-constructor-decl "[[T, List] -> (cons?)]" List_adt nil))
   shostak))
 (theoreme 0
  (theoreme-3 "industion simple echoue seule" 3655003524
   ("" (induct "l")
    (("1" (grind)
      (("1" (rewrite "sort_nil")
        (("1" (rewrite "sorted?_nil") nil nil)) nil))
      nil)
     ("2" (skosimp)
      (("2" (rewrite "sort_cons")
        (("2" (lemma "lemme_utile")
          (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((List type-decl nil List_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (every adt-def-decl "boolean" List_adt nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? const-decl "[List[nat] -> boolean]" SortedList2 nil)
    (sort const-decl "[List[nat] -> List[nat]]" SortedList2 nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (List_induction formula-decl nil List_adt nil)
    (sort_nil formula-decl nil SortedList2 nil)
    (sorted?_nil formula-decl nil SortedList2 nil)
    (sort_cons formula-decl nil SortedList2 nil)
    (lemme_utile formula-decl nil SortedList2 nil))
   shostak)
  (theoreme-2 "new proof shorter?" 3655003217
   ("" (induct "l" :name "list_induction1")
    (("1" (skosimp)
      (("1" (lemma "insert_nil")
        (("1" (inst? -1)
          (("1" (replace -1 1 LR)
            (("1" (lemma "sorted?_cons_nil") (("1" (inst? -1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp) (("2" (skosimp) (("2" (postpone) nil nil)) nil))
      nil)
     ("3" (postpone) nil nil))
    nil)
   nil shostak)
  (yes "pruve longue avec lemma+replace+induction specifique"
   3655002967
   ("" (induct "l" :name "list_induction1")
    (("1" (skosimp)
      (("1" (lemma "insert_nil")
        (("1" (inst? -1)
          (("1" (replace -1 1 LR)
            (("1" (lemma "sorted?_cons_nil") (("1" (inst? -1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "insert_nil")
                    (("2" (inst? -1)
                      (("2" (replace -1 2 LR)
                        (("2" (lemma "sorted?_cons_cons")
                          (("2" (inst? -1)
                            (("2" (lemma "sorted?_cons_nil")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1"
                      (inst -1 "i!1" "cons1_var!1"
                       "cons(cons2_var!1, cons3_var!1)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "sorted?_cons_cons")
                    (("2" (inst? -1)
                      (("2" (case "i!1 <= cons2_var!1")
                        (("1" (lemma "insert_cons_inf")
                          (("1"
                            (inst -1 "i!1" "cons2_var!1" "cons3_var!1")
                            (("1" (assert)
                              (("1"
                                (replace -1 2 LR)
                                (("1"
                                  (lemma "sorted?_cons_cons")
                                  (("1"
                                    (inst
                                     -1
                                     "cons1_var!1"
                                     "i!1"
                                     "cons(cons2_var!1, cons3_var!1)")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "insert_cons_sup")
                          (("2"
                            (inst -1 "i!1" "cons2_var!1" "cons3_var!1")
                            (("2" (assert)
                              (("2"
                                (replace -1 3 LR)
                                (("2"
                                  (lemma "sorted?_cons_cons")
                                  (("2"
                                    (inst
                                     -1
                                     "cons1_var!1"
                                     "cons2_var!1"
                                     "insert(i!1, cons3_var!1)")
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (theoreme-1 nil 3599022459
   ("" (induct "l" :name "list_induction1")
    (("1" (skosimp)
      (("1" (lemma "insert_nil")
        (("1" (inst? -1)
          (("1" (replace -1 1 LR)
            (("1" (lemma "sorted?_cons_nil") (("1" (inst? -1) nil nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1" (inst? -1) (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "insert_nil")
                    (("2" (inst? -1)
                      (("2" (replace -1 2 LR)
                        (("2" (lemma "sorted?_cons_cons")
                          (("2" (inst? -1)
                            (("2" (lemma "sorted?_cons_nil")
                              (("2"
                                (inst? -1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (skosimp)
      (("3" (skosimp)
        (("3" (case "i!1 <= cons1_var!1")
          (("1" (lemma "insert_cons_inf")
            (("1" (inst? -1)
              (("1" (assert)
                (("1" (replace -1 1 LR)
                  (("1" (lemma "sorted?_cons_cons")
                    (("1"
                      (inst -1 "i!1" "cons1_var!1"
                       "cons(cons2_var!1, cons3_var!1)")
                      (("1" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (lemma "insert_cons_sup")
            (("2" (inst? -1)
              (("2" (assert)
                (("2" (replace -1 2 LR)
                  (("2" (lemma "sorted?_cons_cons")
                    (("2" (inst? -1)
                      (("2" (case "i!1 <= cons2_var!1")
                        (("1" (lemma "insert_cons_inf")
                          (("1"
                            (inst -1 "i!1" "cons2_var!1" "cons3_var!1")
                            (("1" (assert)
                              (("1"
                                (replace -1 2 LR)
                                (("1"
                                  (lemma "sorted?_cons_cons")
                                  (("1"
                                    (inst
                                     -1
                                     "cons1_var!1"
                                     "i!1"
                                     "cons(cons2_var!1, cons3_var!1)")
                                    (("1" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (postpone) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((number nonempty-type-decl nil numbers nil)
    (List type-decl nil List_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (PRED type-eq-decl nil defined_types nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (sorted? const-decl "[List[nat] -> boolean]" SortedList2 nil)
    (insert const-decl "[nat, List[nat] -> List[nat]]" SortedList2 nil)
    (list_induction1 formula-decl nil SortedList2 nil)
    (insert_nil formula-decl nil SortedList2 nil)
    (sorted?_cons_nil formula-decl nil SortedList2 nil)
    (insert_cons_sup formula-decl nil SortedList2 nil)
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (insert_cons_inf formula-decl nil SortedList2 nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (sorted?_cons_cons formula-decl nil SortedList2 nil)
    (empty? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (nil adt-constructor-decl "(empty?)" List_adt nil)
    (<= const-decl "bool" reals nil)
    (cons? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (cons adt-constructor-decl "[[T, List] -> (cons?)]" List_adt nil))
   shostak)))

