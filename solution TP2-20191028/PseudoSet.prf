(PseudoSet
 (th1 0
  (th1-1 nil 3781261790
   (""
    (auto-rewrite-theory-with-importings "PseudoSet" :always? true
     :importchain? true)
    (("" (induct "l")
      (("1" (grind) nil nil)
       ("2" (skosimp)
        (("2" (do-rewrite)
          (("2" (grind)
            (("2" (grind)
              (("2" (case "isIn(cons1_var!1, cons2_var!1)")
                (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((List type-decl nil List_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (size const-decl "[List[T] -> nat]" PseudoSet nil)
    (count const-decl "[List[T] -> nat]" PseudoSet nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (List_induction formula-decl nil List_adt nil)
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (conut_nil formula-decl nil PseudoSet nil)
    (size_nil formula-decl nil PseudoSet nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size_cons formula-decl nil PseudoSet nil)
    (count_cons_no formula-decl nil PseudoSet nil)
    (count_cons_yes formula-decl nil PseudoSet nil)
    (isIn const-decl "[T, List[T] -> bool]" PseudoSet nil))
   shostak))
 (th2 0
  (th2-1 nil 3781261392
   (""
    (auto-rewrite-theory-with-importings "PseudoSet" :always? true
     :importchain? true)
    (("" (induct "l")
      (("1" (skosimp) (("1" (grind) (("1" (postpone) nil nil)) nil))
        nil)
       ("2" (postpone) nil nil))
      nil))
    nil)
   nil shostak)))

