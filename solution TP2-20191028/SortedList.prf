(SortedList
 (theoreme 0
  (theoreme-2 "simple inductive version with lemme_utile" 3655005608
   ("" (induct "l")
    (("1" (rewrite "sort_nil") (("1" (rewrite "sorted?_nil") nil nil))
      nil)
     ("2" (skosimp)
      (("2" (lemma "lemme_utile")
        (("2" (rewrite "sort_cons")
          (("2" (inst? -1) (("2" (assert) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   nil shostak)
  (theoreme-1 nil 3599015467
   ("" (auto-rewrite-theory-with-importings "SortedList" :always? true)
    (("" (induct-and-simplify "l") nil nil)) nil)
   ((sort_cons formula-decl nil SortedList nil)
    (lemme_utile formula-decl nil SortedList nil)
    (sort_nil formula-decl nil SortedList nil)
    (sorted?_nil formula-decl nil SortedList nil)
    (List_induction formula-decl nil List_adt nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (sort const-decl "[List[nat] -> List[nat]]" SortedList nil)
    (sorted? const-decl "[List[nat] -> boolean]" SortedList nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (every adt-def-decl "boolean" List_adt nil)
    (PRED type-eq-decl nil defined_types nil)
    (List type-decl nil List_adt nil))
   shostak)))

