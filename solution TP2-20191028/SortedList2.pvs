%------------------------------------
% Les listes triées : version axiomes
% avec une nouvelle induction
% 28/10/2015
%------------------------------------
SortedList2 : THEORY
 BEGIN	
        %%% TEST FOR nat ONLY
        IMPORTING List[nat]
	 l: VAR List[nat]
 	i,j,k : VAR nat

	% predicat "est trie"
	sorted? : [List[nat] -> boolean]
sorted?_nil : AXIOM sorted?(nil)
sorted?_cons_nil : AXIOM sorted?(cons(i, nil))
sorted?_cons_cons : AXIOM sorted?(cons(i, cons(j, l))) = ((i <= j) AND sorted?(cons(j, l)))

	% insertion : ne supprime pas les égaux mais insère en triant
	insert : [nat, List[nat] -> List[nat]]
insert_nil :  AXIOM insert(i, nil) = cons(i, nil)
insert_cons_inf : AXIOM (i <= j) IMPLIES insert(i, cons(j, l)) = cons(i, cons(j, l))
insert_cons_sup : AXIOM (i > j) IMPLIES insert(i, cons(j, l)) = cons(j, insert(i, l))

	% operation de tri simple
	sort : [List[nat] -> List[nat]]
sort_nil : AXIOM sort(nil) = nil
sort_cons : AXIOM sort(cons(i, l)) = insert(i, sort(l))

%============== AUTRE AXIOME INDUCTION
% regarder dans List_adt.pvs l'axiome d'induction
% et de là pas difficile ? d'écrire ce nouveau schéma d'induction
% un essai avec le cas liste a 1 element (vient de PVS/EX1/meslistes)
list_induction1: THEOREM
    FORALL (p: [List[nat] -> boolean]):
      % le cas de base nil
      (p(nil) 
	AND
      % le cas de base avec 1 seule élément
	(FORALL (cons1_var: nat): p(cons(cons1_var, nil)))
	AND
      % le cas inductif avec au moins deux éléments
        (FORALL (cons1_var: nat, cons2_var: nat, cons3_var: List[nat]):
           p(cons(cons2_var, cons3_var)) IMPLIES p(cons(cons1_var, cons(cons2_var, cons3_var)))))
       IMPLIES (FORALL (list_var: List[nat]): p(list_var));
%%% c'est un théorème qui est assez facile à prouver
% (skosimp) %%% no induction sur les prédicats
% (induct "list_var") % on utilise la seule méthode connue l'induction structurelle
% en fait le cas nil est trivial ne reste que le cas inductif
% mais on doit encore dérouler un niveau pour accorder les deux schémas
% (induct "cons2_var") % 
% (skosimp) (grind) (skosimp) (grind) % OK
% on peut faire des inst? replace assert aussi

%============== les preuves


%-------------------------
lemme_utile : THEOREM sorted?(l) IMPLIES sorted?(insert(i, l))
	 %------------------------------------------------
	 % voir induction simple mais schéma identique à celle +bas
	 % (induct "l" :name "list_induction1")
	 % (skosimp)
         % (lemma "insert_nil") (inst? -1)
         % (replace -1 1 LR)
         % (lemma "sorted?_cons_nil") (inst? -1) OK
	 % (case "i!1 <= cons1_var!1")
         % (lemma "insert_cons_inf") (inst? -1)
         % (assert) (replace -1 1 LR)
         % (lemma "sorted?_cons_cons") (inst? -1)
         % (assert) OK 2.1
	 % .... comme l'autre mais le cas sup
	 % conduit à sorted?(cons(cons1_var!1, insert(i!1, nil)))
	 % que l'on ne sait pas reecrire car nous manque prop que
	 % insert se réduit à cons
	 % mais justement on peut contourner cela avec l'induction spéciale
	 % et le test d'un cas de plus comme ci-dessous
	 % -----------------------------------------------

     %------------------------------------------------
     % (induct "l" :name "list_induction1")
     % (skosimp)
     % (lemma "insert_nil") (inst? -1)
     % (replace -1 1 LR)
     % (lemma "sorted?_cons_nil") (inst? -1) OK
     % (skosimp) (skosimp)
     % (case "i!1 <= cons1_var!1")
     % (lemma "insert_cons_inf") (inst? -1)
     % (assert) (replace -1 1 LR)
     % (lemma "sorted?_cons_cons") (inst? -1)
     % (assert) OK 2.1
     % (lemma "insert_cons_sup") (inst? -1)
     % (assert) (replace -1 2 LR)
     % (lemma "insert_nil") (inst? -1) (replace -1 2 LR)
     % (lemma "sorted?_cons_cons") (inst? -1)
     % (lemma "sorted?_cons_nil") (inst? -1)
     % (assert) OK 2.2
     % (skosimp) (skosimp)
     % (case "i!1 <= cons1_var!1")
     % (lemma "insert_cons_inf") (inst? -1)
     % (assert) (replace -1 1 LR)
     % (lemma "sorted?_cons_cons")
     % (inst -1 "i!1" "cons1_var!1" "cons(cons2_var!1, cons3_var!1)")
     % (assert) OK 3.1
     % (lemma "insert_cons_sup") (inst? -1)
     % (assert) (replace -1 2 LR)
     % (lemma "sorted?_cons_cons") (inst? -1)
     % Hypo induction (inst? -3) (assert)
     %  continuer avec  "i!1 <= cons2_var!1" et voir lemma insert ...
     % (case "i!1 <= cons2_var!1")
     % (lemma "insert_cons_inf") (inst -1 "i!1" "cons2_var!1" "cons3_var!1")
     % (assert) (replace -1 2 LR)
     %  (lemma "sorted?_cons_cons")
     % (inst -1 "cons1_var!1" "i!1" "cons(cons2_var!1, cons3_var!1)")
     % (grind) OK 3.2.1
     % (lemma "insert_cons_sup")
     % (inst -1 "i!1" "cons2_var!1" "cons3_var!1")
     % (assert) (replace -1 3 LR)
     % (lemma "sorted?_cons_cons")
     % (inst -1 "cons1_var!1" "cons2_var!1" "insert(i!1, cons3_var!1)")
     % (grind)
     % OKkkkkk
     %------------------------------------------------


%-----------------

theoreme : THEOREM FORALL l: sorted?(sort(l))
      % -----------------------
      % la version de SortedList marche toujours of course
      % (induct "l")
      % (rewrite "sort_nil") (rewrite "sorted?_nil")  % OK
      % (skosimp)
      % (rewrite "sort_cons")
      % (lemma "lemme_utile") (inst? -1)
      % (assert) OK
      % ------------------

     % ---------------------------------------------------
     % une autre version possible 
     % (auto-rewrite-theory-with-importings "SortedList2" :always? true)
     % choisir l'axiome d'induction
     % (induct "l" :name "list_induction1")
     % (grind) %OK for nil
     % (grind) % OK for cons(1,nil)
     % (grind)
     % OK mais utilise le TH plus haut ...
     % ---------------------------------------------------

 END SortedList2
