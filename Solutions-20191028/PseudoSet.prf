(PseudoSet
 (seting_TCC1 0
  (seting_TCC1-1 nil 3781265863 ("" (existence-tcc) nil nil) nil nil))
 (TH1 0
  (alternative "alternative" 3781263179
   ("" (auto-rewrite-theory-with-importings "PseudoSet" :always? true)
    (("" (induct "l")
      (("1" (grind) nil nil)
       ("2" (skosimp)
        (("2" (grind)
          (("2" (case "isIn?(cons1_var!1, cons2_var!1)")
            (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((isIn? const-decl "[T, List[T] -> bool]" PseudoSet nil)
    (count_cons_yes formula-decl nil PseudoSet nil)
    (count_cons_no formula-decl nil PseudoSet nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (size_cons formula-decl nil PseudoSet nil)
    (count_nil formula-decl nil PseudoSet nil)
    (size_nil formula-decl nil PseudoSet nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (List_induction formula-decl nil List_adt nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (size const-decl "[List[T] -> nat]" PseudoSet nil)
    (count const-decl "[List[T] -> nat]" PseudoSet nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (>= const-decl "bool" reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (<= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (List type-decl nil List_adt nil))
   shostak)
  (TH1-1 nil 3780884614
   ("" (auto-rewrite-theory-with-importings "PseudoSet" :always? true)
    (("" (induct "l")
      (("1" (grind) nil nil)
       ("2" (skosimp)
        (("2" (case "isIn?(cons1_var!1, cons2_var!1)")
          (("1" (grind) nil nil) ("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((List type-decl nil List_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (<= const-decl "bool" reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (>= const-decl "bool" reals nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (count const-decl "[List[T] -> nat]" PseudoSet nil)
    (size const-decl "[List[T] -> nat]" PseudoSet nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (List_induction formula-decl nil List_adt nil)
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (size_nil formula-decl nil PseudoSet nil)
    (count_nil formula-decl nil PseudoSet nil)
    (size_cons formula-decl nil PseudoSet nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (count_cons_no formula-decl nil PseudoSet nil)
    (count_cons_yes formula-decl nil PseudoSet nil)
    (isIn? const-decl "[T, List[T] -> bool]" PseudoSet nil))
   shostak))
 (LEM1 0
  (alternative "alternative" 3781264979
   ("" (auto-rewrite-theory-with-importings "PseudoSet" :always? true)
    (("" (induct "l")
      (("1" (skosimp) (("1" (grind) nil nil)) nil)
       ("2" (skosimp)
        (("2" (skosimp)
          (("2" (rewrite "isin_alt" +)
            (("2" (flatten)
              (("2" (inst? -1)
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (rewrite "seting_cons_no" -1)
                    (("2" (rewrite "isin_alt")
                      (("2" (split)
                        (("1" (propax) nil nil) ("2" (propax) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((isin_alt formula-decl nil PseudoSet nil)
    (seting_cons_no formula-decl nil PseudoSet nil)
    (seting_cons_yes formula-decl nil PseudoSet nil)
    (isin_nil formula-decl nil PseudoSet nil)
    (seting_nil formula-decl nil PseudoSet nil)
    (List_induction formula-decl nil List_adt nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (seting const-decl "[List[T] -> List[T]]" PseudoSet nil)
    (isIn? const-decl "[T, List[T] -> bool]" PseudoSet nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (List type-decl nil List_adt nil))
   shostak)
  (LEM1-1 nil 3780884669
   ("" (auto-rewrite-theory-with-importings "PseudoSet" :always? true)
    (("" (induct "l")
      (("1" (skosimp) (("1" (grind) nil nil)) nil)
       ("2" (skosimp)
        (("2" (skosimp)
          (("2" (case "x!1 = cons1_var!1")
            (("1" (rewrite "isin_cons_yes" +) nil nil)
             ("2" (rewrite "isin_cons_no" +)
              (("2" (inst? -1)
                (("2" (split)
                  (("1" (propax) nil nil)
                   ("2" (rewrite "seting_cons_no" -1)
                    (("2" (rewrite "isin_cons_no") nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((List type-decl nil List_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (isIn? const-decl "[T, List[T] -> bool]" PseudoSet nil)
    (seting const-decl "[List[T] -> List[T]]" PseudoSet nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (List_induction formula-decl nil List_adt nil)
    (seting_nil formula-decl nil PseudoSet nil)
    (isin_nil formula-decl nil PseudoSet nil)
    (seting_cons_yes formula-decl nil PseudoSet nil)
    (seting_cons_no formula-decl nil PseudoSet nil)
    (= const-decl "[T, T -> boolean]" equalities nil))
   shostak))
 (LEM2 0
  (LEM2-1 nil 3780884861
   ("" (induct "l")
    (("1" (skosimp)
      (("1" (case "x!1 = y!1")
        (("1" (rewrite "isin_cons_yes" +) nil nil)
         ("2" (rewrite "isin_nil") nil nil))
        nil))
      nil)
     ("2" (skosimp)
      (("2" (skosimp)
        (("2" (case "x!1 = y!1")
          (("1" (rewrite "isin_cons_yes" +) nil nil)
           ("2" (rewrite "isin_cons_no" +) nil nil))
          nil))
        nil))
      nil))
    nil)
   (nil (isin_nil formula-decl nil PseudoSet nil)
    (nil adt-constructor-decl "(empty?)" List_adt nil)
    (empty? adt-recognizer-decl "[List -> boolean]" List_adt nil) nil
    (= const-decl "[T, T -> boolean]" equalities nil)
    (List_induction formula-decl nil List_adt nil)
    (T formal-nonempty-type-decl nil PseudoSet nil)
    (cons adt-constructor-decl "[[T, List] -> (cons?)]" List_adt nil)
    (cons? adt-recognizer-decl "[List -> boolean]" List_adt nil)
    (isIn? const-decl "[T, List[T] -> bool]" PseudoSet nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (List type-decl nil List_adt nil))
   shostak)))

