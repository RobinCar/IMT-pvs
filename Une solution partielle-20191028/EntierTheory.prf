(EntierTheory
 (simple1 0
  (simple1-1 nil 3748076877
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (skosimp) (("" (do-rewrite) nil nil)) nil)) nil)
   nil shostak))
 (simple2 0
  (simple2-1 nil 3748076967
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (skosimp) (("" (do-rewrite) nil nil)) nil)) nil)
   ((equal?_plus1_plus1 formula-decl nil EntierTheory nil)) shostak))
 (pair_impair 0
  (pair_impair-1 nil 3748076998
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (induct "i")
      (("1" (do-rewrite) (("1" (ground) nil nil)) nil)
       ("2" (skosimp)
        (("2" (do-rewrite)
          (("2" (ground)
            (("2" (replace -1) (("2" (ground) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Entier type-decl nil Entier_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pair? const-decl "[Entier -> boolean]" EntierTheory nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (impair? const-decl "[Entier -> boolean]" EntierTheory nil)
    (Entier_induction formula-decl nil Entier_adt nil)
    (impair?_zero formula-decl nil EntierTheory nil)
    (pair?_zero formula-decl nil EntierTheory nil)
    (pair?_plus1 formula-decl nil EntierTheory nil)
    (impair?_plus1 formula-decl nil EntierTheory nil))
   shostak))
 (min_prop 0
  (min_prop-1 nil 3748169935
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (induct "i")
      (("1" (do-rewrite) nil nil)
       ("2" (skosimp)
        (("2" (lemma "min_plus1_plus1")
          (("2" (inst?)
            (("2" (replace -1)
              (("2" (replace -2) (("2" (propax) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Entier type-decl nil Entier_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (min const-decl "[Entier, Entier -> Entier]" EntierTheory nil)
    (notzero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (plus1 adt-constructor-decl "[Entier -> (notzero?)]" Entier_adt
           nil)
    (Entier_induction formula-decl nil Entier_adt nil)
    (min_plus1_zero formula-decl nil EntierTheory nil)
    (Entier_zero_extensionality formula-decl nil Entier_adt nil)
    (min_plus1_plus1 formula-decl nil EntierTheory nil))
   shostak))
 (inf_inf 0
  (inf_inf-1 nil 3748077082
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (induct "i")
      (("1" (skosimp) (("1" (ground) nil nil)) nil)
       ("2" (skosimp)
        (("2" (induct "j")
          (("1" (inst?) (("1" (ground) nil nil)) nil)
           ("2" (skosimp) (("2" (inst?) (("2" (ground) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Entier type-decl nil Entier_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (inf const-decl "[Entier, Entier -> boolean]" EntierTheory nil)
    (notzero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (plus1 adt-constructor-decl "[Entier -> (notzero?)]" Entier_adt
           nil)
    (Entier_induction formula-decl nil Entier_adt nil)
    (inf_zero_var formula-decl nil EntierTheory nil)
    (inf_plus1_zero formula-decl nil EntierTheory nil)
    (zero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (zero adt-constructor-decl "(zero?)" Entier_adt nil)
    (inf_plus1_plus1 formula-decl nil EntierTheory nil))
   shostak))
 (inf_2 0
  (inf_2-1 nil 3748077152
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (induct "i")
      (("1" (rewrite "inf_zero_var") nil nil)
       ("2" (skosimp)
        (("2" (lemma "inf_plus1_plus1")
          (("2" (inst?)
            (("2" (replace -1) (("2" (propax) nil nil)) nil)) nil))
          nil))
        nil))
      nil))
    nil)
   ((Entier type-decl nil Entier_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (inf const-decl "[Entier, Entier -> boolean]" EntierTheory nil)
    (Entier_induction formula-decl nil Entier_adt nil)
    (zero adt-constructor-decl "(zero?)" Entier_adt nil)
    (zero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (inf_zero_var formula-decl nil EntierTheory nil)
    (inf_plus1_plus1 formula-decl nil EntierTheory nil))
   shostak))
 (plus_zero 0
  (plus_zero-1 nil 3748077329
   (""
    (auto-rewrite-theory-with-importings "EntierTheory" :always? true)
    (("" (induct "i")
      (("" (skosimp)
        (("" (rewrite "plus_var_plus1")
          (("" (rewrite "plus_var_zero")
            (("" (rewrite "plus_var_zero")
              (("" (replace -1 (1) RL) (("" (propax) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((Entier type-decl nil Entier_adt nil)
    (boolean nonempty-type-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (plus const-decl "[Entier, Entier -> Entier]" EntierTheory nil)
    (zero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (zero adt-constructor-decl "(zero?)" Entier_adt nil)
    (Entier_induction formula-decl nil Entier_adt nil)
    (plus_var_plus1 formula-decl nil EntierTheory nil)
    (plus1 adt-constructor-decl "[Entier -> (notzero?)]" Entier_adt
           nil)
    (notzero? adt-recognizer-decl "[Entier -> boolean]" Entier_adt nil)
    (plus_var_zero formula-decl nil EntierTheory nil))
   shostak)))

